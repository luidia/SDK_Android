package com.pnf.pen.dataimport;

import java.util.List;

import com.pnf.bt.lib.memory.DataImportFigure;
import com.pnf.bt.lib.memory.DataImportStroke;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PointF;
import android.util.AttributeSet;
import android.view.View;

public class DataImportPreView extends View {
	Context mContext;
	
	Paint mPaint;
	
	Bitmap mBitmap;
	Canvas mCanvas;
	
	Bitmap accBitmap;
	Canvas accCanvas;
	
	boolean isAccMode = false;
	
	PointF previousPoint1 = null;
	PointF previousPoint2 = null;
	PointF currentPoint = null;
	
	public DataImportPreView(Context c)
	{
		super(c);
		
		if (!isInEditMode()) {
			initView(c);
		}
	}
	
	public DataImportPreView(Context c, AttributeSet attrs) 
	{
		super(c, attrs);
		
		if (!isInEditMode()) {
			initView(c);
		}
	}
	
	void initView(Context c)
	{
		mContext = c;
		
		if(mPaint == null){
			mPaint = new Paint();//Paint.ANTI_ALIAS_FLAG
			
			mPaint.setStrokeWidth(1);
			mPaint.setStyle(Paint.Style.STROKE);
			mPaint.setStrokeCap(Paint.Cap.ROUND);
			mPaint.setColor(Color.rgb(0, 0, 0));
			mPaint.setAntiAlias(true);
		}
	}
	
	void setAccMode(boolean _isAcc){
		isAccMode = _isAcc;
	}
	
	void setDrawingSize(int _width ,int _height ,boolean _isAcc){
		if(_isAcc){
			if(accBitmap != null){
				accBitmap.recycle();
				accBitmap = null;
		    }
			
			accBitmap = Bitmap.createBitmap(_width ,_height ,Bitmap.Config.ARGB_8888);
			accCanvas = new Canvas(accBitmap);
			
			accCanvas.drawColor(Color.WHITE);
		}else{
			if(mBitmap != null){
				mBitmap.recycle();
				mBitmap = null;
		    }
			
			mBitmap = Bitmap.createBitmap(_width ,_height ,Bitmap.Config.ARGB_8888);
			mCanvas = new Canvas(mBitmap);
			
			mCanvas.drawColor(Color.WHITE);
		}
	}
	
	void drawFigure(List<DataImportFigure> _figureList ,boolean _isAcc){
		for(int i=0;i<_figureList.size();i++){
			DataImportFigure figure = _figureList.get(i);
			
			Path mPath = new Path();
			
			for(int j=0;j<figure.m_Stroke.size();j++){
				DataImportStroke stroke = figure.m_Stroke.get(j);
				
				if(j == 0){
					previousPoint1 = new PointF(stroke.pt.x ,stroke.pt.y);
					previousPoint2 = new PointF(stroke.pt.x ,stroke.pt.y);
					currentPoint = new PointF(stroke.pt.x ,stroke.pt.y);
				}else{
					PointF mid1 = new PointF();
					PointF mid2 = new PointF();
					
					previousPoint2 = new PointF(previousPoint1.x ,previousPoint1.y);
					previousPoint1 = new PointF(currentPoint.x ,currentPoint.y);
					currentPoint = new PointF(stroke.pt.x ,stroke.pt.y);
					
					mid1 = BizMidPoint(previousPoint1, previousPoint2);
					mid2 = BizMidPoint(currentPoint, previousPoint1);
					
					if(j == figure.m_Stroke.size()-1){
						mPath.moveTo(mid1.x, mid1.y);
						mPath.quadTo(previousPoint1.x, previousPoint1.y, mid2.x, mid2.y);
						mPath.lineTo(currentPoint.x, currentPoint.y);
						
						if(_isAcc){
							accCanvas.drawPath(mPath, mPaint);
						}else{
							mCanvas.drawPath(mPath, mPaint);
						}
					}else{
						mPath.moveTo(mid1.x, mid1.y);
						mPath.quadTo(previousPoint1.x, previousPoint1.y, mid2.x, mid2.y);
						
						if(_isAcc){
							accCanvas.drawPath(mPath, mPaint);
						}else{
							mCanvas.drawPath(mPath, mPaint);
						}
					}
				}
			}
		}
	}
	
	PointF BizMidPoint(PointF pt,PointF pt2)
	{
		return new PointF((pt.x + pt2.x)/2, (pt.y + pt2.y)/2);
	}
	
	@Override
	protected void onDraw(Canvas c) {
		if(isAccMode){
			if(accBitmap != null){
				c.drawBitmap(accBitmap, 0, 0, null);
			}
		}else{
			if(mBitmap != null){
				c.drawBitmap(mBitmap, 0, 0, null);
			}
		}
	}
}